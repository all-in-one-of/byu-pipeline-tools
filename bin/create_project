#!/usr/bin/env python
import argparse
import os
import subprocess
import sys
from byuam.environment import Environment
from  byuam import pipeline_io
from byuam.project import Project

def create_project(path, name='test', email=None, password=None, nickname=None):
	path = os.path.abspath(path)
	production = os.path.join(path, 'production')
	if not os.path.exists(production):
		pipeline_io.mkdir(production)
	assets = os.path.join(production, 'assets')
	if not os.path.exists(assets):
		pipeline_io.mkdir(assets)
	shots = os.path.join(production, 'shots')
	if not os.path.exists(shots):
		pipeline_io.mkdir(shots)
	users = os.path.join(path, 'users')
	if not os.path.exists(users):
		pipeline_io.mkdir(users)
	hdas = os.path.join(production, 'hdas')
	if not os.path.exists(hdas):
		pipeline_io.mkdir(hdas)
	tools = os.path.join(production, 'tools')
	if not os.path.exists(tools):
		pipeline_io.mkdir(tools)
	crowdCycles = os.path.join(production, 'crowdCycles')
	if not os.path.exists(crowdCycles):
		pipeline_io.mkdir(crowdCycles)
	datadict = Environment.create_new_dict(name, assets, shots, tools, crowdCycles, users, hdas, email, password)
	pipeline_file = os.path.join(path, Environment.PIPELINE_FILENAME)
	pipeline_io.writefile(pipeline_file, datadict)

	# Set up .desktop files
	iconScript = os.path.join(path, 'byu-pipeline-tools', 'bin', 'make-icons.sh')
	if(nickname is not None):
		subprocess.call(['sh', iconScript, '-n', nickname, name, path])
	else:
		subprocess.call(['sh', iconScript, name, path])

	#print 'To make this the active project, set the BYU_PROJECT_DIR environment variable:\nexport BYU_PROJECT_DIR=%s' % path
	print 'Project Creation Complete!'


if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('directory', type=str, help='location for new project')
	parser.add_argument('projectName', type=str, help='name of the new project')
	parser.add_argument('--email', type=str, help='email address for support emails')
	parser.add_argument('--password', type=str, help='password for email address')
	parser.add_argument('--nickname', type=str, help='nickname for the software. It will be appended to the end of the software name. Fo')
	args = parser.parse_args()
	if not os.path.exists(args.directory):
		print 'The project directory %s does not exist.' % args.directory
		print 'Would you like to create it? (y/n)'
		yesOrNo = raw_input().lower()
		if yesOrNo == 'y' or yesOrNo == 'yes':
			os.makedirs(args.directory)
		else:
			print 'Aborting'
			sys.exit()

	if os.path.exists(os.path.join(args.directory, Environment.PIPELINE_FILENAME)):
		print 'project already exists'
	else:
		create_project(args.directory, name=args.projectName, email=args.email, password=args.password, nickname=args.nickname)
